<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.ReplyQuestionReplyMapper" >
  <resultMap id="BaseResultMap" type="model.ReplyQuestionReply" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="question_reply_id" property="questionReplyId" jdbcType="INTEGER" />
    <result column="reply_description" property="replyDescription" jdbcType="VARCHAR" />
    <result column="responder_id" property="responderId" jdbcType="INTEGER" />
    <result column="relpy_time" property="relpyTime" jdbcType="TIMESTAMP" />
    <result column="reply_pro_num" property="replyProNum" jdbcType="INTEGER" />
    <result column="reply_inverse_num" property="replyInverseNum" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, question_reply_id, reply_description, responder_id, relpy_time, reply_pro_num, 
    reply_inverse_num
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="model.ReplyQuestionReplyExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from reply_question_reply
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from reply_question_reply
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from reply_question_reply
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="model.ReplyQuestionReplyExample" >
    delete from reply_question_reply
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="model.ReplyQuestionReply" useGeneratedKeys="true" keyProperty="id">
    insert into reply_question_reply (id, question_reply_id, reply_description, 
      responder_id, relpy_time, reply_pro_num, 
      reply_inverse_num)
    values (#{id,jdbcType=INTEGER}, #{questionReplyId,jdbcType=INTEGER}, #{replyDescription,jdbcType=VARCHAR}, 
      #{responderId,jdbcType=INTEGER}, #{relpyTime,jdbcType=TIMESTAMP}, #{replyProNum,jdbcType=INTEGER}, 
      #{replyInverseNum,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="model.ReplyQuestionReply" useGeneratedKeys="true" keyProperty="id">
    insert into reply_question_reply
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="questionReplyId != null" >
        question_reply_id,
      </if>
      <if test="replyDescription != null" >
        reply_description,
      </if>
      <if test="responderId != null" >
        responder_id,
      </if>
      <if test="relpyTime != null" >
        relpy_time,
      </if>
      <if test="replyProNum != null" >
        reply_pro_num,
      </if>
      <if test="replyInverseNum != null" >
        reply_inverse_num,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="questionReplyId != null" >
        #{questionReplyId,jdbcType=INTEGER},
      </if>
      <if test="replyDescription != null" >
        #{replyDescription,jdbcType=VARCHAR},
      </if>
      <if test="responderId != null" >
        #{responderId,jdbcType=INTEGER},
      </if>
      <if test="relpyTime != null" >
        #{relpyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="replyProNum != null" >
        #{replyProNum,jdbcType=INTEGER},
      </if>
      <if test="replyInverseNum != null" >
        #{replyInverseNum,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="model.ReplyQuestionReplyExample" resultType="java.lang.Integer" >
    select count(*) from reply_question_reply
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update reply_question_reply
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.questionReplyId != null" >
        question_reply_id = #{record.questionReplyId,jdbcType=INTEGER},
      </if>
      <if test="record.replyDescription != null" >
        reply_description = #{record.replyDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.responderId != null" >
        responder_id = #{record.responderId,jdbcType=INTEGER},
      </if>
      <if test="record.relpyTime != null" >
        relpy_time = #{record.relpyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.replyProNum != null" >
        reply_pro_num = #{record.replyProNum,jdbcType=INTEGER},
      </if>
      <if test="record.replyInverseNum != null" >
        reply_inverse_num = #{record.replyInverseNum,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update reply_question_reply
    set id = #{record.id,jdbcType=INTEGER},
      question_reply_id = #{record.questionReplyId,jdbcType=INTEGER},
      reply_description = #{record.replyDescription,jdbcType=VARCHAR},
      responder_id = #{record.responderId,jdbcType=INTEGER},
      relpy_time = #{record.relpyTime,jdbcType=TIMESTAMP},
      reply_pro_num = #{record.replyProNum,jdbcType=INTEGER},
      reply_inverse_num = #{record.replyInverseNum,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="model.ReplyQuestionReply" >
    update reply_question_reply
    <set >
      <if test="questionReplyId != null" >
        question_reply_id = #{questionReplyId,jdbcType=INTEGER},
      </if>
      <if test="replyDescription != null" >
        reply_description = #{replyDescription,jdbcType=VARCHAR},
      </if>
      <if test="responderId != null" >
        responder_id = #{responderId,jdbcType=INTEGER},
      </if>
      <if test="relpyTime != null" >
        relpy_time = #{relpyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="replyProNum != null" >
        reply_pro_num = #{replyProNum,jdbcType=INTEGER},
      </if>
      <if test="replyInverseNum != null" >
        reply_inverse_num = #{replyInverseNum,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.ReplyQuestionReply" >
    update reply_question_reply
    set question_reply_id = #{questionReplyId,jdbcType=INTEGER},
      reply_description = #{replyDescription,jdbcType=VARCHAR},
      responder_id = #{responderId,jdbcType=INTEGER},
      relpy_time = #{relpyTime,jdbcType=TIMESTAMP},
      reply_pro_num = #{replyProNum,jdbcType=INTEGER},
      reply_inverse_num = #{replyInverseNum,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="searchReplyQuestionReplyOrderByTimePaging" resultMap="BaseResultMap" parameterType="map" >
    select
    <include refid="Base_Column_List" />
    from reply_question_reply
    where question_reply_id = #{questionReplyId,jdbcType=INTEGER}
    order by relpy_time DESC
    limit #{beginPos,jdbcType=INTEGER} ,#{pageSize,jdbcType=INTEGER}
  </select>

  <select id="searchReplyQuestionReplyOrderByTime" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from reply_question_reply
    where question_reply_id = #{questionReplyId,jdbcType=INTEGER}
    order by relpy_time DESC
  </select>
  
</mapper>