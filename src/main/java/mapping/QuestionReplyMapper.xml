<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.QuestionReplyMapper" >
  <resultMap id="BaseResultMap" type="model.QuestionReply" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="question_id" property="questionId" jdbcType="INTEGER" />
    <result column="reply_description" property="replyDescription" jdbcType="VARCHAR" />
    <result column="responder_id" property="responderId" jdbcType="INTEGER" />
    <result column="reply_time" property="replyTime" jdbcType="TIMESTAMP" />
    <result column="pro_num" property="proNum" jdbcType="INTEGER" />
    <result column="inverse_num" property="inverseNum" jdbcType="INTEGER" />
    <result column="adoption_rate" property="adoptionRate" jdbcType="REAL" />
    <result column="reply_number" property="replyNumber" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, question_id, reply_description, responder_id, reply_time, pro_num, inverse_num,
    adoption_rate, reply_number
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="model.QuestionReplyExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from question_reply
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from question_reply
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from question_reply
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="model.QuestionReplyExample" >
    delete from question_reply
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="model.QuestionReply" >
    insert into question_reply (id, question_id, reply_description,
    responder_id, reply_time, pro_num,
    inverse_num, adoption_rate, reply_number
    )
    values (#{id,jdbcType=INTEGER}, #{questionId,jdbcType=INTEGER}, #{replyDescription,jdbcType=VARCHAR},
    #{responderId,jdbcType=INTEGER}, #{replyTime,jdbcType=TIMESTAMP}, #{proNum,jdbcType=INTEGER},
    #{inverseNum,jdbcType=INTEGER}, #{adoptionRate,jdbcType=REAL}, #{replyNumber,jdbcType=INTEGER}
    )
  </insert>
  <insert id="insertSelective" parameterType="model.QuestionReply" >
    insert into question_reply
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="questionId != null" >
        question_id,
      </if>
      <if test="replyDescription != null" >
        reply_description,
      </if>
      <if test="responderId != null" >
        responder_id,
      </if>
      <if test="replyTime != null" >
        reply_time,
      </if>
      <if test="proNum != null" >
        pro_num,
      </if>
      <if test="inverseNum != null" >
        inverse_num,
      </if>
      <if test="adoptionRate != null" >
        adoption_rate,
      </if>
      <if test="replyNumber != null" >
        reply_number,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="questionId != null" >
        #{questionId,jdbcType=INTEGER},
      </if>
      <if test="replyDescription != null" >
        #{replyDescription,jdbcType=VARCHAR},
      </if>
      <if test="responderId != null" >
        #{responderId,jdbcType=INTEGER},
      </if>
      <if test="replyTime != null" >
        #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="proNum != null" >
        #{proNum,jdbcType=INTEGER},
      </if>
      <if test="inverseNum != null" >
        #{inverseNum,jdbcType=INTEGER},
      </if>
      <if test="adoptionRate != null" >
        #{adoptionRate,jdbcType=REAL},
      </if>
      <if test="replyNumber != null" >
        #{replyNumber,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="model.QuestionReplyExample" resultType="java.lang.Integer" >
    select count(*) from question_reply
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update question_reply
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.questionId != null" >
        question_id = #{record.questionId,jdbcType=INTEGER},
      </if>
      <if test="record.replyDescription != null" >
        reply_description = #{record.replyDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.responderId != null" >
        responder_id = #{record.responderId,jdbcType=INTEGER},
      </if>
      <if test="record.replyTime != null" >
        reply_time = #{record.replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.proNum != null" >
        pro_num = #{record.proNum,jdbcType=INTEGER},
      </if>
      <if test="record.inverseNum != null" >
        inverse_num = #{record.inverseNum,jdbcType=INTEGER},
      </if>
      <if test="record.adoptionRate != null" >
        adoption_rate = #{record.adoptionRate,jdbcType=REAL},
      </if>
      <if test="record.replyNumber != null" >
        reply_number = #{record.replyNumber,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update question_reply
    set id = #{record.id,jdbcType=INTEGER},
    question_id = #{record.questionId,jdbcType=INTEGER},
    reply_description = #{record.replyDescription,jdbcType=VARCHAR},
    responder_id = #{record.responderId,jdbcType=INTEGER},
    reply_time = #{record.replyTime,jdbcType=TIMESTAMP},
    pro_num = #{record.proNum,jdbcType=INTEGER},
    inverse_num = #{record.inverseNum,jdbcType=INTEGER},
    adoption_rate = #{record.adoptionRate,jdbcType=REAL},
    reply_number = #{record.replyNumber,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="model.QuestionReply" >
    update question_reply
    <set >
      <if test="questionId != null" >
        question_id = #{questionId,jdbcType=INTEGER},
      </if>
      <if test="replyDescription != null" >
        reply_description = #{replyDescription,jdbcType=VARCHAR},
      </if>
      <if test="responderId != null" >
        responder_id = #{responderId,jdbcType=INTEGER},
      </if>
      <if test="replyTime != null" >
        reply_time = #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="proNum != null" >
        pro_num = #{proNum,jdbcType=INTEGER},
      </if>
      <if test="inverseNum != null" >
        inverse_num = #{inverseNum,jdbcType=INTEGER},
      </if>
      <if test="adoptionRate != null" >
        adoption_rate = #{adoptionRate,jdbcType=REAL},
      </if>
      <if test="replyNumber != null" >
        reply_number = #{replyNumber,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.QuestionReply" >
    update question_reply
    set question_id = #{questionId,jdbcType=INTEGER},
      reply_description = #{replyDescription,jdbcType=VARCHAR},
      responder_id = #{responderId,jdbcType=INTEGER},
      reply_time = #{replyTime,jdbcType=TIMESTAMP},
      pro_num = #{proNum,jdbcType=INTEGER},
      inverse_num = #{inverseNum,jdbcType=INTEGER},
      adoption_rate = #{adoptionRate,jdbcType=REAL},
      reply_number = #{replyNumber,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="searchQuestionReplyByQuestionIdOrderByAdoptionRate" resultMap="BaseResultMap" parameterType="map" >
    select
    <include refid="Base_Column_List" />
    from question_reply
    where question_id = #{questionId,jdbcType=INTEGER}
    ORDER BY adoption_rate DESC
    limit #{beginPos,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>

  <select id="searchQuestionReplyByQuestionIdOrderByTime" resultMap="BaseResultMap" parameterType="map" >
    select
    <include refid="Base_Column_List" />
    from question_reply
    where question_id = #{questionId,jdbcType=INTEGER}
    ORDER BY reply_time DESC
    limit #{beginPos,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>

  <select id="selectCountByQuestionId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select  count(*) from question_reply
    where question_id = #{questionId,jdbcType=INTEGER}
  </select>

</mapper>