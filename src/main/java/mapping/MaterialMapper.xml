<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.MaterialMapper" >
  <resultMap id="BaseResultMap" type="model.Material" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="material_type_id" property="materialTypeId" jdbcType="INTEGER" />
    <result column="material_name" property="materialName" jdbcType="VARCHAR" />
    <result column="storage_address" property="storageAddress" jdbcType="VARCHAR" />
    <result column="problem_square_id" property="problemSquareId" jdbcType="INTEGER" />
    <result column="upload_time" property="uploadTime" jdbcType="TIMESTAMP" />
    <result column="upload_user_id" property="uploadUserId" jdbcType="INTEGER" />
    <result column="data_size" property="dataSize" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, material_type_id, material_name, storage_address, problem_square_id, upload_time, 
    upload_user_id, data_size
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="model.MaterialExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from material
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from material
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from material
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="model.MaterialExample" >
    delete from material
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="model.Material" useGeneratedKeys="true" keyProperty="id">
    insert into material (id, material_type_id, material_name, 
      storage_address, problem_square_id, upload_time, 
      upload_user_id, data_size)
    values (#{id,jdbcType=INTEGER}, #{materialTypeId,jdbcType=INTEGER}, #{materialName,jdbcType=VARCHAR}, 
      #{storageAddress,jdbcType=VARCHAR}, #{problemSquareId,jdbcType=INTEGER}, #{uploadTime,jdbcType=TIMESTAMP}, 
      #{uploadUserId,jdbcType=INTEGER}, #{dataSize,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="model.Material" useGeneratedKeys="true" keyProperty="id">
    insert into material
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="materialTypeId != null" >
        material_type_id,
      </if>
      <if test="materialName != null" >
        material_name,
      </if>
      <if test="storageAddress != null" >
        storage_address,
      </if>
      <if test="problemSquareId != null" >
        problem_square_id,
      </if>
      <if test="uploadTime != null" >
        upload_time,
      </if>
      <if test="uploadUserId != null" >
        upload_user_id,
      </if>
      <if test="dataSize != null" >
        data_size,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="materialTypeId != null" >
        #{materialTypeId,jdbcType=INTEGER},
      </if>
      <if test="materialName != null" >
        #{materialName,jdbcType=VARCHAR},
      </if>
      <if test="storageAddress != null" >
        #{storageAddress,jdbcType=VARCHAR},
      </if>
      <if test="problemSquareId != null" >
        #{problemSquareId,jdbcType=INTEGER},
      </if>
      <if test="uploadTime != null" >
        #{uploadTime,jdbcType=TIMESTAMP},
      </if>
      <if test="uploadUserId != null" >
        #{uploadUserId,jdbcType=INTEGER},
      </if>
      <if test="dataSize != null" >
        #{dataSize,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="model.MaterialExample" resultType="java.lang.Integer" >
    select count(*) from material
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update material
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.materialTypeId != null" >
        material_type_id = #{record.materialTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.materialName != null" >
        material_name = #{record.materialName,jdbcType=VARCHAR},
      </if>
      <if test="record.storageAddress != null" >
        storage_address = #{record.storageAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.problemSquareId != null" >
        problem_square_id = #{record.problemSquareId,jdbcType=INTEGER},
      </if>
      <if test="record.uploadTime != null" >
        upload_time = #{record.uploadTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.uploadUserId != null" >
        upload_user_id = #{record.uploadUserId,jdbcType=INTEGER},
      </if>
      <if test="record.dataSize != null" >
        data_size = #{record.dataSize,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update material
    set id = #{record.id,jdbcType=INTEGER},
      material_type_id = #{record.materialTypeId,jdbcType=INTEGER},
      material_name = #{record.materialName,jdbcType=VARCHAR},
      storage_address = #{record.storageAddress,jdbcType=VARCHAR},
      problem_square_id = #{record.problemSquareId,jdbcType=INTEGER},
      upload_time = #{record.uploadTime,jdbcType=TIMESTAMP},
      upload_user_id = #{record.uploadUserId,jdbcType=INTEGER},
      data_size = #{record.dataSize,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="model.Material" >
    update material
    <set >
      <if test="materialTypeId != null" >
        material_type_id = #{materialTypeId,jdbcType=INTEGER},
      </if>
      <if test="materialName != null" >
        material_name = #{materialName,jdbcType=VARCHAR},
      </if>
      <if test="storageAddress != null" >
        storage_address = #{storageAddress,jdbcType=VARCHAR},
      </if>
      <if test="problemSquareId != null" >
        problem_square_id = #{problemSquareId,jdbcType=INTEGER},
      </if>
      <if test="uploadTime != null" >
        upload_time = #{uploadTime,jdbcType=TIMESTAMP},
      </if>
      <if test="uploadUserId != null" >
        upload_user_id = #{uploadUserId,jdbcType=INTEGER},
      </if>
      <if test="dataSize != null" >
        data_size = #{dataSize,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.Material" >
    update material
    set material_type_id = #{materialTypeId,jdbcType=INTEGER},
      material_name = #{materialName,jdbcType=VARCHAR},
      storage_address = #{storageAddress,jdbcType=VARCHAR},
      problem_square_id = #{problemSquareId,jdbcType=INTEGER},
      upload_time = #{uploadTime,jdbcType=TIMESTAMP},
      upload_user_id = #{uploadUserId,jdbcType=INTEGER},
      data_size = #{dataSize,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>